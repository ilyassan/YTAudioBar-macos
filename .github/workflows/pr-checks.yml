name: PR Checks

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for large files
      run: |
        echo "Checking for files larger than 10MB..."
        find . -type f -size +10M -not -path "./.git/*" | while read file; do
          echo "❌ Large file found: $file ($(du -h "$file" | cut -f1))"
          exit 1
        done || echo "✅ No large files found"
        
    - name: Check file structure
      run: |
        echo "Checking project structure..."
        
        # Check for required files
        required_files=(
          "README.md"
          "YTAudioBar.xcodeproj/project.pbxproj"
          "YTAudioBar/AppDelegate.swift"
          ".gitignore"
        )
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file exists"
          else
            echo "❌ $file is missing"
            exit 1
          fi
        done
        
    - name: Check Swift code formatting
      run: |
        echo "Checking Swift code formatting..."
        
        # Count Swift files
        swift_files=$(find YTAudioBar -name "*.swift" | wc -l)
        echo "Found $swift_files Swift files"
        
        # Basic formatting checks
        if find YTAudioBar -name "*.swift" -exec grep -l $'\t' {} \;; then
          echo "⚠️ Files with tabs found (consider using spaces)"
        else
          echo "✅ No tabs found in Swift files"
        fi
        
    - name: Check for TODO/FIXME comments
      run: |
        echo "Checking for TODO/FIXME comments..."
        
        todo_count=$(grep -r "TODO\|FIXME\|XXX" YTAudioBar --include="*.swift" | wc -l || echo "0")
        
        if [ "$todo_count" -gt 0 ]; then
          echo "⚠️ Found $todo_count TODO/FIXME comments:"
          grep -rn "TODO\|FIXME\|XXX" YTAudioBar --include="*.swift" || true
        else
          echo "✅ No TODO/FIXME comments found"
        fi
        
  build-check:
    name: Build Check on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-13, macos-14, macos-15]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
      
    - name: Build project
      run: |
        echo "Building project..."
        xcodebuild build \
          -project YTAudioBar.xcodeproj \
          -scheme YTAudioBar \
          -configuration Debug \
          -destination "platform=macOS" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGN_IDENTITY="" \
          PROVISIONING_PROFILE="" \
          -quiet
          
        if [ $? -eq 0 ]; then
          echo "✅ Build successful"
        else
          echo "❌ Build failed"
          exit 1
        fi
        
  security-check:
    name: Security Check
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for hardcoded secrets
      run: |
        echo "Checking for potential hardcoded secrets..."
        
        # Patterns to look for
        patterns=(
          "password.*=.*['\"].*['\"]"
          "secret.*=.*['\"].*['\"]"
          "api_key.*=.*['\"].*['\"]"
          "token.*=.*['\"].*['\"]"
          "private_key"
          "BEGIN RSA PRIVATE KEY"
          "BEGIN PRIVATE KEY"
        )
        
        found_issues=false
        
        for pattern in "${patterns[@]}"; do
          if grep -ri "$pattern" YTAudioBar --include="*.swift" --include="*.plist"; then
            echo "⚠️ Potential secret found with pattern: $pattern"
            found_issues=true
          fi
        done
        
        if [ "$found_issues" = false ]; then
          echo "✅ No hardcoded secrets found"
        fi
        
    - name: Check entitlements
      run: |
        echo "Checking app entitlements..."
        
        if [ -f "YTAudioBar/YTAudioBar.entitlements" ]; then
          echo "Entitlements file found:"
          cat YTAudioBar/YTAudioBar.entitlements
          
          # Check for dangerous entitlements
          dangerous_entitlements=(
            "com.apple.security.get-task-allow"
            "com.apple.security.cs.allow-jit"
            "com.apple.security.cs.allow-unsigned-executable-memory"
          )
          
          for entitlement in "${dangerous_entitlements[@]}"; do
            if grep -q "$entitlement" YTAudioBar/YTAudioBar.entitlements; then
              echo "⚠️ Potentially dangerous entitlement found: $entitlement"
            fi
          done
        else
          echo "No entitlements file found"
        fi