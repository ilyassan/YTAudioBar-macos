name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  create-release:
    name: Create Release
    runs-on: macos-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
      
    - name: Show build environment
      run: |
        xcodebuild -version
        sw_vers
        
    - name: Install create-dmg and GraphicsMagick
      run: |
        brew install create-dmg
        brew install graphicsmagick
      
    - name: Get version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
    - name: Create ExportOptions.plist
      run: |
        mkdir -p .github/workflows
        cat > .github/workflows/ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>mac-application</string>
            <key>destination</key>
            <string>export</string>
            <key>signingStyle</key>
            <string>automatic</string>
            <key>stripSwiftSymbols</key>
            <true/>
        </dict>
        </plist>
        EOF
        
    - name: Archive and export app
      run: |
        # Archive the app
        xcodebuild archive \
          -project YTAudioBar.xcodeproj \
          -scheme YTAudioBar \
          -configuration Release \
          -destination "platform=macOS" \
          -archivePath build/YTAudioBar.xcarchive \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGN_IDENTITY="" \
          PROVISIONING_PROFILE=""
          
        # Export the app
        xcodebuild -exportArchive \
          -archivePath build/YTAudioBar.xcarchive \
          -exportPath build/export \
          -exportOptionsPlist .github/workflows/ExportOptions.plist
        
    - name: Prepare dependencies for DMG creation
      run: |
        # Install Pillow for background image generation
        pip3 install Pillow --break-system-packages
        
    - name: Create Professional DMG
      run: |
        # Use our professional DMG creation script
        ./create_professional_dmg.sh ${{ steps.get_version.outputs.version }}
          
    - name: Generate release notes
      id: release_notes
      run: |
        cat > release_notes.md << 'EOF'
        ## YTAudioBar ${{ steps.get_version.outputs.version }}
        
        ### üéµ What's New
        
        <!-- Add your release notes here -->
        
        ### üìã System Requirements
        
        - **macOS**: 13.0 (Ventura) or later
        - **Architecture**: Intel and Apple Silicon Macs supported
        - **Dependencies**: Automatically downloaded on first launch
        
        ### üì• Installation
        
        1. Download `YTAudioBar-${{ steps.get_version.outputs.version }}.dmg`
        2. Open the DMG file
        3. Drag YTAudioBar to Applications folder
        4. Launch YTAudioBar from Applications
        5. Allow dependencies to download on first launch
        
        ### üîÑ Updating
        
        YTAudioBar includes automatic update checking. You'll be notified when new versions are available.
        
        ### üêõ Known Issues
        
        - First launch may take a moment while dependencies download
        - Some YouTube videos may not be available due to regional restrictions
        
        ---
        
        **Full Changelog**: https://github.com/ilyassan/YTAudioBar-macos/compare/${{ steps.get_version.outputs.tag }}...HEAD
        EOF
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          YTAudioBar-${{ steps.get_version.outputs.version }}.dmg
        name: YTAudioBar ${{ steps.get_version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Wait for release to be available
      run: sleep 10

    - name: Generate Sparkle appcast.xml
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd scripts
        python3 generate_appcast.py
        cd ..

    - name: Commit and push appcast.xml to main branch
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git fetch origin main
        git checkout main
        cp scripts/appcast.xml appcast.xml
        git add appcast.xml
        git commit -m "chore: update appcast.xml for version ${{ steps.get_version.outputs.version }}" || echo "No changes to commit"
        git push origin main
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: YTAudioBar-${{ steps.get_version.outputs.version }}
        path: |
          YTAudioBar-${{ steps.get_version.outputs.version }}.dmg
          build/YTAudioBar.xcarchive