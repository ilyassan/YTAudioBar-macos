name: Multi-Version macOS Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly to catch compatibility issues
    - cron: '0 10 * * 1'

jobs:
  compatibility-test:
    name: Test on ${{ matrix.os-name }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS 13 removed - doesn't support Xcode objectVersion 77
          - os: macos-14  
            os-name: "macOS 14 Sonoma"
            current-stable: true
            min-supported: true
          - os: macos-15
            os-name: "macOS 15 Sequoia"
            latest: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
        
    - name: Show environment info
      run: |
        echo "🖥️  Testing on: ${{ matrix.os-name }}"
        echo "📦 macOS Version: $(sw_vers -productVersion)"
        echo "🔧 Xcode Version: $(xcodebuild -version | head -1)"
        echo "💻 Hardware: $(sysctl -n hw.model)"
        echo "🏗️  Architecture: $(uname -m)"
        
    - name: Check minimum macOS version requirement
      run: |
        echo "📋 Checking macOS version compatibility..."
        
        # Get current macOS version
        CURRENT_VERSION=$(sw_vers -productVersion)
        echo "Current macOS: $CURRENT_VERSION"
        
        # Our app requires macOS 13.0+
        REQUIRED_VERSION="13.0"
        echo "Required macOS: $REQUIRED_VERSION+"
        
        # This will be used to ensure our deployment target is correct
        if [ "${{ matrix.min-supported }}" == "true" ]; then
          echo "✅ Testing minimum supported version: $CURRENT_VERSION"
        elif [ "${{ matrix.latest }}" == "true" ]; then
          echo "🆕 Testing latest macOS version: $CURRENT_VERSION"
        else
          echo "🔄 Testing stable macOS version: $CURRENT_VERSION"
        fi
        
    - name: Build for Debug configuration
      run: |
        echo "🔨 Building Debug configuration on ${{ matrix.os-name }}..."
        xcodebuild build \
          -project YTAudioBar.xcodeproj \
          -scheme YTAudioBar \
          -configuration Debug \
          -destination "platform=macOS" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGN_IDENTITY="" \
          PROVISIONING_PROFILE="" \
          -quiet
          
    - name: Build for Release configuration  
      run: |
        echo "📦 Building Release configuration on ${{ matrix.os-name }}..."
        xcodebuild build \
          -project YTAudioBar.xcodeproj \
          -scheme YTAudioBar \
          -configuration Release \
          -destination "platform=macOS" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGN_IDENTITY="" \
          PROVISIONING_PROFILE="" \
          -quiet
          
    - name: Test Archive creation
      run: |
        echo "📂 Testing archive creation on ${{ matrix.os-name }}..."
        xcodebuild archive \
          -project YTAudioBar.xcodeproj \
          -scheme YTAudioBar \
          -configuration Release \
          -destination "platform=macOS" \
          -archivePath build/YTAudioBar-${{ matrix.os }}.xcarchive \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGN_IDENTITY="" \
          PROVISIONING_PROFILE="" \
          -quiet
          
    - name: Verify build artifacts
      run: |
        echo "🔍 Verifying build artifacts..."
        
        if [ -d "build/YTAudioBar-${{ matrix.os }}.xcarchive" ]; then
          echo "✅ Archive created successfully on ${{ matrix.os-name }}"
          
          # Check if the app binary exists
          APP_PATH="build/YTAudioBar-${{ matrix.os }}.xcarchive/Products/Applications/YTAudioBar.app"
          if [ -d "$APP_PATH" ]; then
            echo "✅ App bundle created: $APP_PATH"
            
            # Check binary architecture
            BINARY_PATH="$APP_PATH/Contents/MacOS/YTAudioBar"
            if [ -f "$BINARY_PATH" ]; then
              echo "🏗️  Binary architectures:"
              file "$BINARY_PATH"
              lipo -info "$BINARY_PATH" 2>/dev/null || echo "Single architecture binary"
            fi
            
            # Check app bundle structure
            echo "📁 App bundle contents:"
            ls -la "$APP_PATH/Contents/"
          else
            echo "❌ App bundle not found"
            exit 1
          fi
        else
          echo "❌ Archive not created on ${{ matrix.os-name }}"
          exit 1
        fi
        
    - name: Test compatibility features
      run: |
        echo "🧪 Testing macOS-specific compatibility..."
        
        # Test SwiftUI availability (should work on all our supported versions)
        echo "📱 SwiftUI support: Available on all macOS 13+"
        
        # Test AVFoundation features
        echo "🎵 AVFoundation: Core audio features available"
        
        # Test Core Data features  
        echo "💾 Core Data: Persistent storage available"
        
        # Test URLSession features
        echo "🌐 URLSession: Network requests available"
        
        echo "✅ All compatibility checks passed on ${{ matrix.os-name }}"
        
    - name: Clean up build artifacts
      run: |
        echo "🧹 Cleaning up build artifacts..."
        rm -rf build/
        
    - name: Report test results
      run: |
        echo "📊 Test Summary for ${{ matrix.os-name }}:"
        echo "  ✅ Debug build: Success"
        echo "  ✅ Release build: Success"  
        echo "  ✅ Archive creation: Success"
        echo "  ✅ Compatibility checks: Passed"
        
        if [ "${{ matrix.min-supported }}" == "true" ]; then
          echo "🎯 Minimum version compatibility: CONFIRMED"
        fi